<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.wanda</groupId>
	<artifactId>jobsaccount</artifactId>
	<version>1.0</version>
	<packaging>jar</packaging>

	<name>Flink Account Job</name>
	<url>http://www.myorganization.org</url>

	<repositories>
		<repository>
			<id>apache.snapshots</id>
			<name>Apache Development Snapshot Repository</name>
			<url>https://repository.apache.org/content/repositories/releases/</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>wyt-thirdparty-repo</id>
			<name>Thirdparty Maven Repository</name>
		    <url>http://maven.intra.ffan.com/nexus/content/repositories/thirdparty/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>wyt-repo</id>
			<name>Maxxipoint Maven Repository</name>
		    <url>http://maven.intra.ffan.com/nexus/content/groups/public/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!-- <flink.version>1.4.1</flink.version> -->
		<flink.version>1.3.1</flink.version>
		<slf4j.version>1.7.7</slf4j.version>
		<log4j.version>1.2.17</log4j.version>
		<scala.binary.version>2.11</scala.binary.version>
		<scala.version>2.11.12</scala.version>
	</properties>

	<!-- 

		Execute "mvn clean package -Pbuild-jar"
		to build a jar file out of this project!

		How to use the Flink Quickstart pom:

		a) Adding new dependencies:
			You can add dependencies to the list below.

		b) Build a jar for running on the cluster:

			"mvn clean package -Pbuild-jar"
			This will create a fat-jar which contains all dependencies necessary for running the created jar in a cluster.
	-->

	<dependencies>
	
	    <dependency>
            <groupId>org.apache.hbase</groupId>
            <artifactId>hbase-shaded-client</artifactId>
            <version>1.2.0</version>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
	    <dependency>
            <groupId>commons-httpclient</groupId>
            <artifactId>commons-httpclient</artifactId>
            <version>3.1</version>
        </dependency>
	    <dependency>
            <groupId>org.hsqldb</groupId>
            <artifactId>hsqldb</artifactId>
            <version>2.3.3</version>
        </dependency>
        
        
        
        <dependency>
            <groupId>org.jooq</groupId>
            <artifactId>jooq</artifactId>
            <version>3.8.4</version>
        </dependency>
        <dependency>
            <groupId>org.jooq</groupId>
            <artifactId>jooq-scala</artifactId>
            <version>3.8.4</version>
        </dependency>
        <dependency>
            <groupId>org.jooq</groupId>
            <artifactId>jooq-meta</artifactId>
            <version>3.8.4</version>
        </dependency>
        <dependency>
            <groupId>org.jooq</groupId>
            <artifactId>jooq-codegen</artifactId>
            <version>3.8.4</version>
        </dependency>
        
        
        
        
        
        
	
	    <!-- fastjson start -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.17</version>
        </dependency>
        <!-- fastjson end -->
        
		<dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.0.14</version>
        </dependency>
		<dependency>
		  <groupId>org.mariadb.jdbc</groupId>
		  <artifactId>mariadb-java-client</artifactId>
		  <version>2.1.2</version>
		</dependency>
	    <dependency>
	        <groupId>commons-dbutils</groupId>
	        <artifactId>commons-dbutils</artifactId>
	        <version>2.0-SNAPSHOT</version>
	    </dependency>

	    <dependency>
	        <groupId>org.apache.flink</groupId>
	        <!-- <artifactId>flink-connector-kafka-0.8_2.11</artifactId> -->
	        <artifactId>flink-connector-kafka-0.9_2.11</artifactId>
	        <!-- <artifactId>flink-connector-kafka-0.10_2.11</artifactId> -->
	        <version>${flink.version}</version>
	    </dependency>
		<dependency>
			<groupId>org.apache.flink</groupId>
			<artifactId>flink-core</artifactId>
			<version>${flink.version}</version>
		</dependency>
		<dependency>
			<!-- 执行的时候才需要的依赖包 -->
			<groupId>org.apache.flink</groupId>
			<artifactId>flink-clients_${scala.binary.version}</artifactId>
			<version>${flink.version}</version>
		</dependency>
	    <dependency>  
            <groupId>org.apache.flink</groupId>  
            <artifactId>flink-table_2.11</artifactId>  
            <version>${flink.version}</version>  
        </dependency>  
		<dependency>
			<groupId>org.apache.flink</groupId>
			<artifactId>flink-scala_${scala.binary.version}</artifactId>
			<version>${flink.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.flink</groupId>
			<artifactId>flink-streaming-scala_${scala.binary.version}</artifactId>
			<version>${flink.version}</version>
		</dependency>

        <!--scala相关的依赖-->
		<dependency>
			<groupId>org.scala-lang</groupId>
			<artifactId>scala-library</artifactId>
			<version>${scala.version}</version>
		</dependency>
		
		<!--reflect IO的依赖-->
		<dependency>
		    <groupId>org.scala-lang</groupId>
		    <artifactId>scala-reflect</artifactId>
		    <version>${scala.version}</version>
		</dependency>

		<!-- explicitly add a standard logging framework, as Flink does not have
			a hard dependency on one specific framework by default -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${slf4j.version}</version>
			<!-- <scope>provided</scope> -->
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>${log4j.version}</version>
			<!-- <scope>provided</scope> -->
		</dependency>
	</dependencies>

	<profiles>
		<profile>
			<!-- Profile for packaging correct JAR files -->
			<id>build-jar</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<dependencies>
			    <!-- fastjson start -->
		        <!-- <dependency>
		            <groupId>com.alibaba</groupId>
		            <artifactId>fastjson</artifactId>
		            <version>1.2.17</version>
		            <scope>provided</scope>
		        </dependency> -->
		        <!-- fastjson end -->
			    <dependency>
			        <groupId>commons-dbutils</groupId>
			        <artifactId>commons-dbutils</artifactId>
			        <version>2.0-SNAPSHOT</version>
			        <scope>provided</scope>
			    </dependency>
			    <dependency>
			        <groupId>org.apache.flink</groupId>
			        <artifactId>flink-connector-kafka-0.9_2.11</artifactId>
			        <version>1.4.1</version>
			        <scope>provided</scope>
			    </dependency>
				<dependency>
					<groupId>org.apache.flink</groupId>
					<artifactId>flink-core</artifactId>
					<version>${flink.version}</version>
					<scope>provided</scope>
				</dependency>
				<dependency>
					<groupId>org.apache.flink</groupId>
					<artifactId>flink-clients_${scala.binary.version}</artifactId>
					<version>${flink.version}</version>
					<scope>provided</scope>
				</dependency>
				<dependency>
					<groupId>org.apache.flink</groupId>
					<artifactId>flink-scala_${scala.binary.version}</artifactId>
					<version>${flink.version}</version>
					<scope>provided</scope>
				</dependency>
				<dependency>
					<groupId>org.apache.flink</groupId>
					<artifactId>flink-streaming-scala_${scala.binary.version}</artifactId>
					<version>${flink.version}</version>
					<scope>provided</scope>
				</dependency>
				<dependency>
					<groupId>org.scala-lang</groupId>
					<artifactId>scala-library</artifactId>
					<version>${scala.version}</version>
					<scope>provided</scope>
				</dependency>
				<dependency>
				    <groupId>org.scala-lang</groupId>
				    <artifactId>scala-reflect</artifactId>
				    <version>${scala.version}</version>
				    <scope>provided</scope>
				</dependency>
				<dependency>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
					<version>${slf4j.version}</version>
					<scope>provided</scope>
				</dependency>
				<dependency>
					<groupId>log4j</groupId>
					<artifactId>log4j</artifactId>
					<version>${log4j.version}</version>
					<scope>provided</scope>
				</dependency>
			</dependencies>

			<build>
				<plugins>
					<!-- We use the maven-shade plugin to create a fat jar that contains all dependencies
						except flink and its transitive dependencies. The resulting fat-jar can be executed
						on a cluster. Change the value of Program-Class if your program entry point changes. -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-shade-plugin</artifactId>
						<version>2.4.1</version>
						<executions>
							<!-- Run shade goal on package phase -->
							<execution>
								<phase>package</phase>
								<goals>
									<goal>shade</goal>
								</goals>
								<configuration>
									<artifactSet>
										<excludes>
											<exclude>org.apache.flink:force-shading</exclude>
											<exclude>com.google.code.findbugs:jsr305</exclude>
											<exclude>org.slf4j:*</exclude>
										</excludes>
									</artifactSet>
									<filters>
										<filter>
											<!-- Do not copy the signatures in the META-INF folder.
											Otherwise, this might cause SecurityExceptions when using the JAR. -->
											<artifact>*:*</artifact>
											<excludes>
												<exclude>META-INF/*.SF</exclude>
												<exclude>META-INF/*.DSA</exclude>
												<exclude>META-INF/*.RSA</exclude>
											</excludes>
										</filter>
									</filters>
									<!-- If you want to use ./bin/flink run <quickstart jar> uncomment the following lines.
										This will add a Main-Class entry to the manifest file -->
									<!--
									<transformers>
										<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
										<mainClass>jobaccount.StreamingJob</mainClass>
										</transformer>
									</transformers>
									-->
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<build>
		<plugins>
		
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>
			
			<!-- start 下面两个plugin是打jar包且将maven依赖包一起打包进去 -->
			<plugin>    
                <artifactId>maven-jar-plugin</artifactId>   
                <configuration>    
                <archive>    
                    <manifest>    
                        <!-- 告知 maven-jar-plugin添加一个 Class-Path元素到 MANIFEST.MF文件，以及在Class-Path元素中包括所有依赖项 -->    
                        <addClasspath>true</addClasspath>    
                        <!-- 所有的依赖项应该位于 lib文件夹 -->   
                        <classpathPrefix>lib/</classpathPrefix>
                         <!-- 当用户使用 lib命令执行JAR文件时，使用该元素定义将要执行的类名 -->   
                        <mainClass>com.wanda.jobsaccount.kafka.ReadingFromKafka</mainClass>
                    </manifest>
                </archive>
	            </configuration>
	        </plugin>
	        
	        <plugin>  
	            <artifactId>maven-dependency-plugin</artifactId>  
	            <executions>  
	                <execution>  
	                    <id>copy-dependencies</id>  
	                    <phase>prepare-package</phase>  
	                    <goals>  
	                        <goal>copy-dependencies</goal>  
	                    </goals>  
	                    <configuration>  
	                        <!-- ${project.build.directory}为Maven内置变量，缺省为target -->   
	                        <outputDirectory>${project.build.directory}/classes/lib</outputDirectory>  
	                        <!-- 表示是否不包含间接依赖的包 -->   
	                        <excludeTransitive>false</excludeTransitive>  
	                        <!-- 表示复制的jar文件去掉版本信息 -->   
	                        <stripVersion>true</stripVersion>  
	                    </configuration>  
	                </execution>  
	            </executions>  
	        </plugin>
	        <!-- end -->
		    
		    <!-- <plugin>  
	            <artifactId>maven-assembly-plugin</artifactId>  
	            <configuration>  
		            <descriptorRefs>  
		                <descriptorRef>jar-with-dependencies</descriptorRef>  
		            </descriptorRefs>  
		            <archive>    
		                <manifest>    
		                    <mainClass>com.wanda.jobsaccount.kafka.ReadingFromKafka</mainClass>  
	                    </manifest>  
  	                </archive>  
		         </configuration>
	             <executions>  
			         <execution>  
				         <id>make-assembly</id> this is used for inheritance merges  
				         <phase>package</phase> bind to the packaging phase  
			             <goals>  
				         	<goal>single</goal>  
				         </goals>  
			         </execution>  
		         </executions>  
	         </plugin>   -->
       
       
			<plugin>
				<groupId>net.alchim31.maven</groupId>
				<artifactId>scala-maven-plugin</artifactId>
				<version>3.2.2</version>
				<executions>
					<execution>
						<goals>
							<goal>compile</goal>
							<goal>testCompile</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Eclipse Integration -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.8</version>
				<configuration>
					<downloadSources>true</downloadSources>
					<projectnatures>
						<projectnature>org.scala-ide.sdt.core.scalanature</projectnature>
						<projectnature>org.eclipse.jdt.core.javanature</projectnature>
					</projectnatures>
					<buildcommands>
						<buildcommand>org.scala-ide.sdt.core.scalabuilder</buildcommand>
					</buildcommands>
					<classpathContainers>
						<classpathContainer>org.scala-ide.sdt.launching.SCALA_CONTAINER
						</classpathContainer>
						<classpathContainer>org.eclipse.jdt.launching.JRE_CONTAINER
						</classpathContainer>
					</classpathContainers>
					<excludes>
						<exclude>org.scala-lang:scala-library</exclude>
						<exclude>org.scala-lang:scala-compiler</exclude>
					</excludes>
					<sourceIncludes>
						<sourceInclude>**/*.scala</sourceInclude>
						<sourceInclude>**/*.java</sourceInclude>
					</sourceIncludes>
				</configuration>
			</plugin>

			<!-- Adding scala source directories to build path -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.7</version>
				<executions>
					<!-- Add src/main/scala to eclipse build path -->
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/main/scala</source>
							</sources>
						</configuration>
					</execution>
					<!-- Add src/test/scala to eclipse build path -->
					<execution>
						<id>add-test-source</id>
						<phase>generate-test-sources</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/test/scala</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<pluginManagement>
		    <plugins>
		        <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
		        <plugin>
		            <groupId>org.eclipse.m2e</groupId>
		            <artifactId>lifecycle-mapping</artifactId>
		            <version>1.0.0</version>
		            <configuration>
		                <lifecycleMappingMetadata>
		                    <pluginExecutions>
		                        <pluginExecution>
		                            <pluginExecutionFilter>
		                                <groupId>
		                                    org.codehaus.mojo
		                                </groupId>
		                                <artifactId>
		                                    build-helper-maven-plugin
		                                </artifactId>
		                                <versionRange>
		                                    [1.7,)
		                                </versionRange>
		                                <goals>
		                                    <goal>add-source</goal>
		                                    <goal>add-test-source</goal>
		                                </goals>
		                            </pluginExecutionFilter>
		                            <action>
		                                <ignore></ignore>
		                            </action>
		                        </pluginExecution>
		                    </pluginExecutions>
		                </lifecycleMappingMetadata>
		            </configuration>
		        </plugin>
		    </plugins>
		</pluginManagement>
	</build>
	
</project>
